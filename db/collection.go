// Copyright 2022 Democratized Data Foundation
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package db

import (
	"bytes"
	"context"
	"fmt"
	"strconv"
	"strings"

	"github.com/ipfs/go-cid"
	ds "github.com/ipfs/go-datastore"
	"github.com/ipfs/go-datastore/query"
	ipld "github.com/ipfs/go-ipld-format"
	"github.com/lens-vm/lens/host-go/config/model"
	"github.com/sourcenetwork/immutable"

	"github.com/sourcenetwork/defradb/client"
	"github.com/sourcenetwork/defradb/client/request"
	"github.com/sourcenetwork/defradb/core"
	"github.com/sourcenetwork/defradb/datastore"
	"github.com/sourcenetwork/defradb/db/base"
	"github.com/sourcenetwork/defradb/db/description"
	"github.com/sourcenetwork/defradb/db/fetcher"
	"github.com/sourcenetwork/defradb/errors"
	"github.com/sourcenetwork/defradb/events"
	"github.com/sourcenetwork/defradb/lens"
	merklecrdt "github.com/sourcenetwork/defradb/merkle/crdt"
)

var _ client.Collection = (*collection)(nil)

// collection stores data records at Documents, which are gathered
// together under a collection name. This is analogous to SQL Tables.
type collection struct {
	db *db

	// txn represents any externally provided [datastore.Txn] for which any
	// operation on this [collection] instance should be scoped to.
	//
	// If this has no value, operations requiring a transaction should use an
	// implicit internally managed transaction, which only lives for duration
	// of the operation in question.
	txn immutable.Option[datastore.Txn]

	def client.CollectionDefinition

	indexes        []CollectionIndex
	fetcherFactory func() fetcher.Fetcher
}

// @todo: Move the base Descriptions to an internal API within the db/ package.
// @body: Currently, the New/Create Collection APIs accept CollectionDescriptions
// as params. We want these Descriptions objects to be low level descriptions, and
// to be auto generated based on a more controllable and user friendly
// CollectionOptions object.

// NewCollection returns a pointer to a newly instanciated DB Collection
func (db *db) newCollection(desc client.CollectionDescription, schema client.SchemaDescription) *collection {
	return &collection{
		db:  db,
		def: client.CollectionDefinition{Description: desc, Schema: schema},
	}
}

// newFetcher returns a new fetcher instance for this collection.
// If a fetcherFactory is set, it will be used to create the fetcher.
// It's a very simple factory, but it allows us to inject a mock fetcher
// for testing.
func (c *collection) newFetcher() fetcher.Fetcher {
	var innerFetcher fetcher.Fetcher
	if c.fetcherFactory != nil {
		innerFetcher = c.fetcherFactory()
	} else {
		innerFetcher = new(fetcher.DocumentFetcher)
	}

	return lens.NewFetcher(innerFetcher, c.db.LensRegistry())
}

// createCollection creates a collection and saves it to the database in its system store.
// Note: Collection.ID is an autoincrementing value that is generated by the database.
func (db *db) createCollection(
	ctx context.Context,
	txn datastore.Txn,
	def client.CollectionDefinition,
) (client.Collection, error) {
	schema := def.Schema
	desc := def.Description

	if desc.Name.HasValue() {
		exists, err := description.HasCollectionByName(ctx, txn, desc.Name.Value())
		if err != nil {
			return nil, err
		}
		if exists {
			return nil, ErrCollectionAlreadyExists
		}
	}

	colSeq, err := db.getSequence(ctx, txn, core.COLLECTION_ID)
	if err != nil {
		return nil, err
	}
	colID, err := colSeq.next(ctx, txn)
	if err != nil {
		return nil, err
	}
	desc.ID = uint32(colID)
	desc.RootID = desc.ID

	schema, err = description.CreateSchemaVersion(ctx, txn, schema)
	if err != nil {
		return nil, err
	}
	desc.SchemaVersionID = schema.VersionID

	desc, err = description.SaveCollection(ctx, txn, desc)
	if err != nil {
		return nil, err
	}

	col := db.newCollection(desc, schema)

	for _, index := range desc.Indexes {
		if _, err := col.createIndex(ctx, txn, index); err != nil {
			return nil, err
		}
	}

	return db.getCollectionByID(ctx, txn, desc.ID)
}

func (db *db) validateCollectionDefinitionPolicyDesc(
	ctx context.Context,
	policyDesc immutable.Option[client.PolicyDescription],
) error {
	if !policyDesc.HasValue() {
		// No policy validation needed, weather acp module exists or not doesn't matter.
		return nil
	}

	// If there is a policy specified, but the database does not have
	// an acp module return an error, database must have an acp module
	// to enable access control (inorder to adhere to the policy specified).
	if !db.acp.HasValue() {
		return ErrCanNotHavePolicyWithoutACPModule
	}

	// If we have the policy specified on the collection, and acp module exists,
	// then using the acp module we need to ensure the policy id specified
	// is a valid policy in the model, and that the resource specified is
	// a valid resource that exisits on the target policy.
	return db.acp.Value().ValidatePolicyAndResourceExist(
		ctx,
		policyDesc.Value().ID,
		policyDesc.Value().ResourceName,
	)
}

// ValidateCollectionDefinitions validates that the definitions are valid, beyond syntax.
//
// This is not only limited to the syntax, but also if the information
// within the definition makes sense, this function might also make relevant
// remote calls, like call the acp module for policy validation, and etc.
//
// Note: This should generally be called after parsing, i.e. on the
// collection definitions gotten from calling `db.parser.ParseSDL`.
func (db *db) ValidateCollectionDefinitions(
	ctx context.Context,
	definitions []client.CollectionDefinition,
) error {
	for _, definition := range definitions {
		err := db.validateCollectionDefinitionPolicyDesc(ctx, definition.Description.Policy)
		if err != nil {
			return err
		}
	}

	return nil
}

// updateSchema updates the persisted schema description matching the name of the given
// description, to the values in the given description.
//
// It will validate the given description using [validateUpdateSchema] before updating it.
//
// The schema (including the schema version ID) will only be updated if any changes have actually
// been made, if the given description matches the current persisted description then no changes will be
// applied.
func (db *db) updateSchema(
	ctx context.Context,
	txn datastore.Txn,
	existingSchemaByName map[string]client.SchemaDescription,
	proposedDescriptionsByName map[string]client.SchemaDescription,
	schema client.SchemaDescription,
	migration immutable.Option[model.Lens],
	setAsActiveVersion bool,
) error {
	hasChanged, err := db.validateUpdateSchema(
		ctx,
		txn,
		existingSchemaByName,
		proposedDescriptionsByName,
		schema,
	)
	if err != nil {
		return err
	}

	if !hasChanged {
		return nil
	}

	for _, field := range schema.Fields {
		if field.Kind == client.FieldKind_FOREIGN_OBJECT {
			idFieldName := field.Name + "_id"
			if _, ok := schema.GetField(idFieldName); !ok {
				schema.Fields = append(schema.Fields, client.FieldDescription{
					Name:         idFieldName,
					Kind:         client.FieldKind_DocID,
					RelationName: field.RelationName,
				})
			}
		}
	}

	for i, field := range schema.Fields {
		if field.Typ == client.NONE_CRDT {
			// If no CRDT Type has been provided, default to LWW_REGISTER.
			field.Typ = client.LWW_REGISTER
			schema.Fields[i] = field
		}
	}

	previousVersionID := schema.VersionID
	schema, err = description.CreateSchemaVersion(ctx, txn, schema)
	if err != nil {
		return err
	}

	// After creating the new schema version, we need to create new collection versions for
	// any collection using the previous version.  These will be inactive unless [setAsActiveVersion]
	// is true.

	cols, err := description.GetCollectionsBySchemaVersionID(ctx, txn, previousVersionID)
	if err != nil {
		return err
	}

	colSeq, err := db.getSequence(ctx, txn, core.COLLECTION_ID)
	if err != nil {
		return err
	}

	for _, col := range cols {
		previousID := col.ID

		existingCols, err := description.GetCollectionsBySchemaVersionID(ctx, txn, schema.VersionID)
		if err != nil {
			return err
		}

		// The collection version may exist before the schema version was created locally.  This is
		// because migrations for the globally known schema version may have been registered locally
		// (typically to handle documents synced over P2P at higher versions) before the local schema
		// was updated.  We need to check for them now, and update them instead of creating new ones
		// if they exist.
		var isExistingCol bool
	existingColLoop:
		for _, existingCol := range existingCols {
			sources := existingCol.CollectionSources()
			for _, source := range sources {
				// Make sure that this collection is the parent of the current [col], and not part of
				// another collection set that happens to be using the same schema.
				if source.SourceCollectionID == previousID {
					if existingCol.RootID == client.OrphanRootID {
						existingCol.RootID = col.RootID
						existingCol, err = description.SaveCollection(ctx, txn, existingCol)
						if err != nil {
							return err
						}
					}
					isExistingCol = true
					break existingColLoop
				}
			}
		}

		if !isExistingCol {
			colID, err := colSeq.next(ctx, txn)
			if err != nil {
				return err
			}

			// Create any new collections without a name (inactive), if [setAsActiveVersion] is true
			// they will be activated later along with any existing collection versions.
			col.Name = immutable.None[string]()
			col.ID = uint32(colID)
			col.SchemaVersionID = schema.VersionID
			col.Sources = []any{
				&client.CollectionSource{
					SourceCollectionID: previousID,
					Transform:          migration,
				},
			}

			_, err = description.SaveCollection(ctx, txn, col)
			if err != nil {
				return err
			}

			if migration.HasValue() {
				err = db.LensRegistry().SetMigration(ctx, col.ID, migration.Value())
				if err != nil {
					return err
				}
			}
		}
	}

	if setAsActiveVersion {
		// activate collection versions using the new schema ID.  This call must be made after
		// all new collection versions have been saved.
		err = db.setActiveSchemaVersion(ctx, txn, schema.VersionID)
		if err != nil {
			return err
		}
	}

	return nil
}

// validateUpdateSchema validates that the given schema description is a valid update.
//
// Will return true if the given description differs from the current persisted state of the
// schema. Will return an error if it fails validation.
func (db *db) validateUpdateSchema(
	ctx context.Context,
	txn datastore.Txn,
	existingDescriptionsByName map[string]client.SchemaDescription,
	proposedDescriptionsByName map[string]client.SchemaDescription,
	proposedDesc client.SchemaDescription,
) (bool, error) {
	if proposedDesc.Name == "" {
		return false, ErrSchemaNameEmpty
	}

	existingDesc, collectionExists := existingDescriptionsByName[proposedDesc.Name]
	if !collectionExists {
		return false, NewErrAddCollectionWithPatch(proposedDesc.Name)
	}

	if proposedDesc.Root != existingDesc.Root {
		return false, NewErrSchemaRootDoesntMatch(
			proposedDesc.Name,
			existingDesc.Root,
			proposedDesc.Root,
		)
	}

	if proposedDesc.Name != existingDesc.Name {
		// There is actually little reason to not support this atm besides controlling the surface area
		// of the new feature.  Changing this should not break anything, but it should be tested first.
		return false, NewErrCannotModifySchemaName(existingDesc.Name, proposedDesc.Name)
	}

	if proposedDesc.VersionID != "" && proposedDesc.VersionID != existingDesc.VersionID {
		// If users specify this it will be overwritten, an error is prefered to quietly ignoring it.
		return false, ErrCannotSetVersionID
	}

	hasChangedFields, err := validateUpdateSchemaFields(proposedDescriptionsByName, existingDesc, proposedDesc)
	if err != nil {
		return hasChangedFields, err
	}

	return hasChangedFields, err
}

func validateUpdateSchemaFields(
	descriptionsByName map[string]client.SchemaDescription,
	existingDesc client.SchemaDescription,
	proposedDesc client.SchemaDescription,
) (bool, error) {
	hasChanged := false
	existingFieldsByID := map[client.FieldID]client.FieldDescription{}
	existingFieldIndexesByName := map[string]int{}
	for i, field := range existingDesc.Fields {
		existingFieldIndexesByName[field.Name] = i
		existingFieldsByID[field.ID] = field
	}

	newFieldNames := map[string]struct{}{}
	newFieldIds := map[client.FieldID]struct{}{}
	for proposedIndex, proposedField := range proposedDesc.Fields {
		var existingField client.FieldDescription
		var fieldAlreadyExists bool
		if proposedField.ID != client.FieldID(0) ||
			proposedField.Name == request.DocIDFieldName {
			existingField, fieldAlreadyExists = existingFieldsByID[proposedField.ID]
		}

		if proposedField.ID != client.FieldID(0) && !fieldAlreadyExists {
			return false, NewErrCannotSetFieldID(proposedField.Name, proposedField.ID)
		}

		// If the field is new, then the collection has changed
		hasChanged = hasChanged || !fieldAlreadyExists

		if !fieldAlreadyExists && (proposedField.Kind == client.FieldKind_FOREIGN_OBJECT ||
			proposedField.Kind == client.FieldKind_FOREIGN_OBJECT_ARRAY) {
			if proposedField.Schema == "" {
				return false, NewErrRelationalFieldMissingSchema(proposedField.Name, proposedField.Kind)
			}

			relatedDesc, relatedDescFound := descriptionsByName[proposedField.Schema]

			if !relatedDescFound {
				return false, NewErrSchemaNotFound(proposedField.Name, proposedField.Schema)
			}

			if proposedField.RelationName == "" {
				return false, NewErrRelationalFieldMissingRelationName(proposedField.Name)
			}

			if proposedField.IsPrimaryRelation {
				if proposedField.Kind == client.FieldKind_FOREIGN_OBJECT_ARRAY {
					return false, NewErrPrimarySideOnMany(proposedField.Name)
				}
			}

			if proposedField.Kind == client.FieldKind_FOREIGN_OBJECT {
				idFieldName := proposedField.Name + request.RelatedObjectID
				idField, idFieldFound := proposedDesc.GetField(idFieldName)
				if idFieldFound {
					if idField.Kind != client.FieldKind_DocID {
						return false, NewErrRelationalFieldIDInvalidType(idField.Name, client.FieldKind_DocID, idField.Kind)
					}

					if idField.RelationName == "" {
						return false, NewErrRelationalFieldMissingRelationName(idField.Name)
					}
				}
			}

			var relatedFieldFound bool
			var relatedField client.FieldDescription
			for _, field := range relatedDesc.Fields {
				if field.RelationName == proposedField.RelationName &&
					field.Kind != client.FieldKind_DocID &&
					!(relatedDesc.Name == proposedDesc.Name && field.Name == proposedField.Name) {
					relatedFieldFound = true
					relatedField = field
					break
				}
			}

			if !relatedFieldFound {
				return false, client.NewErrRelationOneSided(proposedField.Name, proposedField.Schema)
			}

			if !(proposedField.IsPrimaryRelation || relatedField.IsPrimaryRelation) {
				return false, NewErrPrimarySideNotDefined(proposedField.RelationName)
			}

			if proposedField.IsPrimaryRelation && relatedField.IsPrimaryRelation {
				return false, NewErrBothSidesPrimary(proposedField.RelationName)
			}
		}

		if _, isDuplicate := newFieldNames[proposedField.Name]; isDuplicate {
			return false, NewErrDuplicateField(proposedField.Name)
		}

		if fieldAlreadyExists && proposedField != existingField {
			return false, NewErrCannotMutateField(proposedField.ID, proposedField.Name)
		}

		if existingIndex := existingFieldIndexesByName[proposedField.Name]; fieldAlreadyExists &&
			proposedIndex != existingIndex {
			return false, NewErrCannotMoveField(proposedField.Name, proposedIndex, existingIndex)
		}

		if !proposedField.Typ.IsSupportedFieldCType() {
			return false, client.NewErrInvalidCRDTType(proposedField.Name, proposedField.Typ.String())
		}

		if !proposedField.Typ.IsCompatibleWith(proposedField.Kind) {
			return false, client.NewErrCRDTKindMismatch(proposedField.Typ.String(), proposedField.Kind.String())
		}

		newFieldNames[proposedField.Name] = struct{}{}
		newFieldIds[proposedField.ID] = struct{}{}
	}

	for _, field := range existingDesc.Fields {
		if _, stillExists := newFieldIds[field.ID]; !stillExists {
			return false, NewErrCannotDeleteField(field.Name, field.ID)
		}
	}
	return hasChanged, nil
}

// SetActiveSchemaVersion activates all collection versions with the given schema version, and deactivates all
// those without it (if they share the same schema root).
//
// This will affect all operations interacting with the schema where a schema version is not explicitly
// provided.  This includes GQL queries and Collection operations.
//
// It will return an error if the provided schema version ID does not exist.
func (db *db) setActiveSchemaVersion(
	ctx context.Context,
	txn datastore.Txn,
	schemaVersionID string,
) error {
	if schemaVersionID == "" {
		return ErrSchemaVersionIDEmpty
	}

	cols, err := description.GetCollectionsBySchemaVersionID(ctx, txn, schemaVersionID)
	if err != nil {
		return err
	}

	schema, err := description.GetSchemaVersion(ctx, txn, schemaVersionID)
	if err != nil {
		return err
	}

	colsWithRoot, err := description.GetCollectionsBySchemaRoot(ctx, txn, schema.Root)
	if err != nil {
		return err
	}

	colsBySourceID := map[uint32][]client.CollectionDescription{}
	colsByID := make(map[uint32]client.CollectionDescription, len(colsWithRoot))
	for _, col := range colsWithRoot {
		colsByID[col.ID] = col

		sources := col.CollectionSources()
		if len(sources) > 0 {
			// For now, we assume that each collection can only have a single source.  This will likely need
			// to change later.
			slice := colsBySourceID[sources[0].SourceCollectionID]
			slice = append(slice, col)
			colsBySourceID[sources[0].SourceCollectionID] = slice
		}
	}

	for _, col := range cols {
		if col.Name.HasValue() {
			// The collection is already active, so we can skip it and continue
			continue
		}
		sources := col.CollectionSources()

		var activeCol client.CollectionDescription
		var rootCol client.CollectionDescription
		var isActiveFound bool
		if len(sources) > 0 {
			// For now, we assume that each collection can only have a single source.  This will likely need
			// to change later.
			activeCol, rootCol, isActiveFound = db.getActiveCollectionDown(ctx, txn, colsByID, sources[0].SourceCollectionID)
		}
		if !isActiveFound {
			// We need to look both down and up for the active version - the most recent is not nessecarily the active one.
			activeCol, isActiveFound = db.getActiveCollectionUp(ctx, txn, colsBySourceID, rootCol.ID)
		}

		var newName string
		if isActiveFound {
			newName = activeCol.Name.Value()
		} else {
			// If there are no active versions in the collection set, take the name of the schema to be the name of the
			// collection.
			newName = schema.Name
		}
		col.Name = immutable.Some(newName)

		_, err = description.SaveCollection(ctx, txn, col)
		if err != nil {
			return err
		}

		if isActiveFound {
			// Deactivate the currently active collection by setting its name to none.
			activeCol.Name = immutable.None[string]()
			_, err = description.SaveCollection(ctx, txn, activeCol)
			if err != nil {
				return err
			}
		}
	}

	// Load the schema into the clients (e.g. GQL)
	return db.loadSchema(ctx, txn)
}

func (db *db) getActiveCollectionDown(
	ctx context.Context,
	txn datastore.Txn,
	colsByID map[uint32]client.CollectionDescription,
	id uint32,
) (client.CollectionDescription, client.CollectionDescription, bool) {
	col, ok := colsByID[id]
	if !ok {
		return client.CollectionDescription{}, client.CollectionDescription{}, false
	}

	if col.Name.HasValue() {
		return col, client.CollectionDescription{}, true
	}

	sources := col.CollectionSources()
	if len(sources) == 0 {
		// If a collection has zero sources it is likely the initial collection version, or
		// this collection set is currently orphaned (can happen when setting migrations that
		// do not yet link all the way back to a non-orphaned set)
		return client.CollectionDescription{}, col, false
	}

	// For now, we assume that each collection can only have a single source.  This will likely need
	// to change later.
	return db.getActiveCollectionDown(ctx, txn, colsByID, sources[0].SourceCollectionID)
}

func (db *db) getActiveCollectionUp(
	ctx context.Context,
	txn datastore.Txn,
	colsBySourceID map[uint32][]client.CollectionDescription,
	id uint32,
) (client.CollectionDescription, bool) {
	cols, ok := colsBySourceID[id]
	if !ok {
		// We have reached the top of the set, and have not found an active collection
		return client.CollectionDescription{}, false
	}

	for _, col := range cols {
		if col.Name.HasValue() {
			return col, true
		}
		activeCol, isFound := db.getActiveCollectionUp(ctx, txn, colsBySourceID, col.ID)
		if isFound {
			return activeCol, isFound
		}
	}

	return client.CollectionDescription{}, false
}

func (db *db) getCollectionByID(ctx context.Context, txn datastore.Txn, id uint32) (client.Collection, error) {
	col, err := description.GetCollectionByID(ctx, txn, id)
	if err != nil {
		return nil, err
	}

	schema, err := description.GetSchemaVersion(ctx, txn, col.SchemaVersionID)
	if err != nil {
		return nil, err
	}

	collection := db.newCollection(col, schema)

	err = collection.loadIndexes(ctx, txn)
	if err != nil {
		return nil, err
	}

	err = collection.loadPolicy(ctx, txn)
	if err != nil {
		return nil, err
	}

	return collection, nil
}

// getCollectionByName returns an existing collection within the database.
func (db *db) getCollectionByName(ctx context.Context, txn datastore.Txn, name string) (client.Collection, error) {
	if name == "" {
		return nil, ErrCollectionNameEmpty
	}

	cols, err := db.getCollections(ctx, txn, client.CollectionFetchOptions{Name: immutable.Some(name)})
	if err != nil {
		return nil, err
	}

	// cols will always have length == 1 here
	return cols[0], nil
}

// GetCollections returns all collections and their descriptions matching the given options
// that currently exist within this [Store].
func (db *db) getCollections(
	ctx context.Context,
	txn datastore.Txn,
	options client.CollectionFetchOptions,
) ([]client.Collection, error) {
	var cols []client.CollectionDescription

	switch {
	case options.Name.HasValue():
		col, err := description.GetCollectionByName(ctx, txn, options.Name.Value())
		if err != nil {
			return nil, err
		}
		cols = append(cols, col)

	case options.SchemaVersionID.HasValue():
		var err error
		cols, err = description.GetCollectionsBySchemaVersionID(ctx, txn, options.SchemaVersionID.Value())
		if err != nil {
			return nil, err
		}

	case options.SchemaRoot.HasValue():
		var err error
		cols, err = description.GetCollectionsBySchemaRoot(ctx, txn, options.SchemaRoot.Value())
		if err != nil {
			return nil, err
		}

	default:
		if options.IncludeInactive.HasValue() && options.IncludeInactive.Value() {
			var err error
			cols, err = description.GetCollections(ctx, txn)
			if err != nil {
				return nil, err
			}
		} else {
			var err error
			cols, err = description.GetActiveCollections(ctx, txn)
			if err != nil {
				return nil, err
			}
		}
	}

	collections := []client.Collection{}
	for _, col := range cols {
		if options.SchemaVersionID.HasValue() {
			if col.SchemaVersionID != options.SchemaVersionID.Value() {
				continue
			}
		}
		if !options.IncludeInactive.Value() && !col.Name.HasValue() {
			continue
		}

		schema, err := description.GetSchemaVersion(ctx, txn, col.SchemaVersionID)
		if err != nil {
			// If the schema is not found we leave it as empty and carry on. This can happen when
			// a migration is registered before the schema is declared locally.
			if !errors.Is(err, ds.ErrNotFound) {
				return nil, err
			}
		}

		if options.SchemaRoot.HasValue() {
			if schema.Root != options.SchemaRoot.Value() {
				continue
			}
		}

		collection := db.newCollection(col, schema)
		collections = append(collections, collection)

		err = collection.loadIndexes(ctx, txn)
		if err != nil {
			return nil, err
		}

		err = collection.loadPolicy(ctx, txn)
		if err != nil {
			return nil, err
		}
	}

	return collections, nil
}

// getAllActiveDefinitions returns all queryable collection/views and any embedded schema used by them.
func (db *db) getAllActiveDefinitions(ctx context.Context, txn datastore.Txn) ([]client.CollectionDefinition, error) {
	cols, err := description.GetActiveCollections(ctx, txn)
	if err != nil {
		return nil, err
	}

	definitions := make([]client.CollectionDefinition, len(cols))
	for i, col := range cols {
		schema, err := description.GetSchemaVersion(ctx, txn, col.SchemaVersionID)
		if err != nil {
			return nil, err
		}

		collection := db.newCollection(col, schema)

		err = collection.loadIndexes(ctx, txn)
		if err != nil {
			return nil, err
		}

		err = collection.loadPolicy(ctx, txn)
		if err != nil {
			return nil, err
		}

		definitions[i] = collection.Definition()
	}

	schemas, err := description.GetCollectionlessSchemas(ctx, txn)
	if err != nil {
		return nil, err
	}

	for _, schema := range schemas {
		definitions = append(
			definitions,
			client.CollectionDefinition{
				Schema: schema,
			},
		)
	}

	return definitions, nil
}

// GetAllDocIDs returns all the document IDs that exist in the collection.
//
// @todo: We probably need a lock on the collection for this kind of op since
// it hits every key and will cause Tx conflicts for concurrent Txs
func (c *collection) GetAllDocIDs(ctx context.Context) (<-chan client.DocIDResult, error) {
	txn, err := c.getTxn(ctx, true)
	if err != nil {
		return nil, err
	}

	return c.getAllDocIDsChan(ctx, txn)
}

func (c *collection) getAllDocIDsChan(
	ctx context.Context,
	txn datastore.Txn,
) (<-chan client.DocIDResult, error) {
	prefix := core.PrimaryDataStoreKey{ // empty path for all keys prefix
		CollectionRootID: c.Description().RootID,
	}
	q, err := txn.Datastore().Query(ctx, query.Query{
		Prefix:   prefix.ToString(),
		KeysOnly: true,
	})
	if err != nil {
		return nil, err
	}

	resCh := make(chan client.DocIDResult)
	go func() {
		defer func() {
			if err := q.Close(); err != nil {
				log.ErrorE(ctx, errFailedtoCloseQueryReqAllIDs, err)
			}
			close(resCh)
			c.discardImplicitTxn(ctx, txn)
		}()
		for res := range q.Next() {
			// check for Done on context first
			select {
			case <-ctx.Done():
				// we've been cancelled! ;)
				return
			default:
				// noop, just continue on the with the for loop
			}
			if res.Error != nil {
				resCh <- client.DocIDResult{
					Err: res.Error,
				}
				return
			}

			rawDocID := ds.NewKey(res.Key).BaseNamespace()
			docID, err := client.NewDocIDFromString(rawDocID)
			if err != nil {
				resCh <- client.DocIDResult{
					Err: res.Error,
				}
				return
			}
			resCh <- client.DocIDResult{
				ID: docID,
			}
		}
	}()

	return resCh, nil
}

// Description returns the client.CollectionDescription.
func (c *collection) Description() client.CollectionDescription {
	return c.Definition().Description
}

// Name returns the collection name.
func (c *collection) Name() immutable.Option[string] {
	return c.Description().Name
}

// Schema returns the Schema of the collection.
func (c *collection) Schema() client.SchemaDescription {
	return c.Definition().Schema
}

// ID returns the ID of the collection.
func (c *collection) ID() uint32 {
	return c.Description().ID
}

func (c *collection) SchemaRoot() string {
	return c.Schema().Root
}

func (c *collection) Definition() client.CollectionDefinition {
	return c.def
}

// WithTxn returns a new instance of the collection, with a transaction
// handle instead of a raw DB handle.
func (c *collection) WithTxn(txn datastore.Txn) client.Collection {
	return &collection{
		db:             c.db,
		txn:            immutable.Some(txn),
		def:            c.def,
		indexes:        c.indexes,
		fetcherFactory: c.fetcherFactory,
	}
}

// Create a new document.
// Will verify the DocID/CID to ensure that the new document is correctly formatted.
func (c *collection) Create(ctx context.Context, doc *client.Document) error {
	txn, err := c.getTxn(ctx, false)
	if err != nil {
		return err
	}
	defer c.discardImplicitTxn(ctx, txn)

	err = c.create(ctx, txn, doc)
	if err != nil {
		return err
	}

	return c.commitImplicitTxn(ctx, txn)
}

// CreateMany creates a collection of documents at once.
// Will verify the DocID/CID to ensure that the new documents are correctly formatted.
func (c *collection) CreateMany(ctx context.Context, docs []*client.Document) error {
	txn, err := c.getTxn(ctx, false)
	if err != nil {
		return err
	}
	defer c.discardImplicitTxn(ctx, txn)

	for _, doc := range docs {
		err = c.create(ctx, txn, doc)
		if err != nil {
			return err
		}
	}
	return c.commitImplicitTxn(ctx, txn)
}

func (c *collection) getDocIDAndPrimaryKeyFromDoc(
	doc *client.Document,
) (client.DocID, core.PrimaryDataStoreKey, error) {
	docID, err := doc.GenerateDocID()
	if err != nil {
		return client.DocID{}, core.PrimaryDataStoreKey{}, err
	}

	primaryKey := c.getPrimaryKeyFromDocID(docID)
	if primaryKey.DocID != doc.ID().String() {
		return client.DocID{}, core.PrimaryDataStoreKey{},
			NewErrDocVerification(doc.ID().String(), primaryKey.DocID)
	}
	return docID, primaryKey, nil
}

func (c *collection) create(ctx context.Context, txn datastore.Txn, doc *client.Document) error {
	docID, primaryKey, err := c.getDocIDAndPrimaryKeyFromDoc(doc)
	if err != nil {
		return err
	}

	// check if doc already exists
	exists, isDeleted, err := c.exists(ctx, txn, primaryKey)
	if err != nil {
		return err
	}
	if exists {
		return NewErrDocumentAlreadyExists(primaryKey.DocID)
	}
	if isDeleted {
		return NewErrDocumentDeleted(primaryKey.DocID)
	}

	// write value object marker if we have an empty doc
	if len(doc.Values()) == 0 {
		valueKey := c.getDataStoreKeyFromDocID(docID)
		err = txn.Datastore().Put(ctx, valueKey.ToDS(), []byte{base.ObjectMarker})
		if err != nil {
			return err
		}
	}

	// write data to DB via MerkleClock/CRDT
	_, err = c.save(ctx, txn, doc, true)
	if err != nil {
		return err
	}

	err = c.indexNewDoc(ctx, txn, doc)
	if err != nil {
		return err
	}

	return c.registerDocCreation(ctx, doc.ID().String())
}

// Update an existing document with the new values.
// Any field that needs to be removed or cleared should call doc.Clear(field) before.
// Any field that is nil/empty that hasn't called Clear will be ignored.
func (c *collection) Update(ctx context.Context, doc *client.Document) error {
	txn, err := c.getTxn(ctx, false)
	if err != nil {
		return err
	}
	defer c.discardImplicitTxn(ctx, txn)

	primaryKey := c.getPrimaryKeyFromDocID(doc.ID())
	exists, isDeleted, err := c.exists(ctx, txn, primaryKey)
	if err != nil {
		return err
	}
	if !exists {
		return client.ErrDocumentNotFound
	}
	if isDeleted {
		return NewErrDocumentDeleted(primaryKey.DocID)
	}

	err = c.update(ctx, txn, doc)
	if err != nil {
		return err
	}

	return c.commitImplicitTxn(ctx, txn)
}

// Contract: DB Exists check is already performed, and a doc with the given ID exists.
// Note: Should we CompareAndSet the update, IE: Query(read-only) the state, and update if changed
// or, just update everything regardless.
// Should probably be smart about the update due to the MerkleCRDT overhead, shouldn't
// add to the bloat.
func (c *collection) update(ctx context.Context, txn datastore.Txn, doc *client.Document) error {
	_, err := c.save(ctx, txn, doc, false)
	if err != nil {
		return err
	}
	return nil
}

// Save a document into the db.
// Either by creating a new document or by updating an existing one
func (c *collection) Save(ctx context.Context, doc *client.Document) error {
	txn, err := c.getTxn(ctx, false)
	if err != nil {
		return err
	}
	defer c.discardImplicitTxn(ctx, txn)

	// Check if document already exists with primary DS key.
	primaryKey := c.getPrimaryKeyFromDocID(doc.ID())
	exists, isDeleted, err := c.exists(ctx, txn, primaryKey)
	if err != nil {
		return err
	}

	if isDeleted {
		return NewErrDocumentDeleted(doc.ID().String())
	}

	if exists {
		err = c.update(ctx, txn, doc)
	} else {
		err = c.create(ctx, txn, doc)
	}
	if err != nil {
		return err
	}

	return c.commitImplicitTxn(ctx, txn)
}

func (c *collection) save(
	ctx context.Context,
	txn datastore.Txn,
	doc *client.Document,
	isCreate bool,
) (cid.Cid, error) {
	if !isCreate {
		err := c.updateIndexedDoc(ctx, txn, doc)
		if err != nil {
			return cid.Undef, err
		}
	}
	// NOTE: We delay the final Clean() call until we know
	// the commit on the transaction is successful. If we didn't
	// wait, and just did it here, then *if* the commit fails down
	// the line, then we have no way to roll back the state
	// side-effect on the document func called here.
	txn.OnSuccess(func() {
		doc.Clean()
	})

	// New batch transaction/store (optional/todo)
	// Ensute/Set doc object marker
	// Loop through doc values
	//	=> 		instantiate MerkleCRDT objects
	//	=> 		Set/Publish new CRDT values
	primaryKey := c.getPrimaryKeyFromDocID(doc.ID())
	links := make([]core.DAGLink, 0)
	for k, v := range doc.Fields() {
		val, err := doc.GetValueWithField(v)
		if err != nil {
			return cid.Undef, err
		}

		if val.IsDirty() {
			fieldKey, fieldExists := c.tryGetFieldKey(primaryKey, k)

			if !fieldExists {
				return cid.Undef, client.NewErrFieldNotExist(k)
			}

			fieldDescription, valid := c.Schema().GetField(k)
			if !valid {
				return cid.Undef, client.NewErrFieldNotExist(k)
			}

			// by default the type will have been set to LWW_REGISTER. We need to ensure
			// that it's set to the same as the field description CRDT type.
			val.SetType(fieldDescription.Typ)

			relationFieldDescription, isSecondaryRelationID := c.isSecondaryIDField(fieldDescription)
			if isSecondaryRelationID {
				primaryId := val.Value().(string)

				err = c.patchPrimaryDoc(ctx, txn, c.Name().Value(), relationFieldDescription, primaryKey.DocID, primaryId)
				if err != nil {
					return cid.Undef, err
				}

				// If this field was a secondary relation ID the related document will have been
				// updated instead and we should discard this value
				continue
			}

			err = c.validateOneToOneLinkDoesntAlreadyExist(ctx, txn, doc.ID().String(), fieldDescription, val.Value())
			if err != nil {
				return cid.Undef, err
			}

			merkleCRDT, err := merklecrdt.InstanceWithStore(
				txn,
				core.NewCollectionSchemaVersionKey(c.Schema().VersionID, c.ID()),
				val.Type(),
				fieldDescription.Kind,
				fieldKey,
				fieldDescription.Name,
			)
			if err != nil {
				return cid.Undef, err
			}

			node, _, err := merkleCRDT.Save(ctx, val)
			if err != nil {
				return cid.Undef, err
			}

			link := core.DAGLink{
				Name: k,
				Cid:  node.Cid(),
			}
			links = append(links, link)
		}
	}

	headNode, priority, err := c.saveCompositeToMerkleCRDT(
		ctx,
		txn,
		primaryKey.ToDataStoreKey(),
		links,
		client.Active,
	)
	if err != nil {
		return cid.Undef, err
	}

	if c.db.events.Updates.HasValue() {
		txn.OnSuccess(
			func() {
				c.db.events.Updates.Value().Publish(
					events.Update{
						DocID:      doc.ID().String(),
						Cid:        headNode.Cid(),
						SchemaRoot: c.Schema().Root,
						Block:      headNode,
						Priority:   priority,
					},
				)
			},
		)
	}

	txn.OnSuccess(func() {
		doc.SetHead(headNode.Cid())
	})

	return headNode.Cid(), nil
}

func (c *collection) validateOneToOneLinkDoesntAlreadyExist(
	ctx context.Context,
	txn datastore.Txn,
	docID string,
	fieldDescription client.FieldDescription,
	value any,
) error {
	if fieldDescription.Kind != client.FieldKind_DocID {
		return nil
	}

	if value == nil {
		return nil
	}

	objFieldDescription, ok := c.Schema().GetField(strings.TrimSuffix(fieldDescription.Name, request.RelatedObjectID))
	if !ok {
		return client.NewErrFieldNotExist(strings.TrimSuffix(fieldDescription.Name, request.RelatedObjectID))
	}
	if objFieldDescription.Kind != client.FieldKind_FOREIGN_OBJECT {
		return nil
	}

	otherCol, err := c.db.getCollectionByName(ctx, txn, objFieldDescription.Schema)
	if err != nil {
		return err
	}
	otherSchema := otherCol.Schema()
	otherObjFieldDescription, _ := otherCol.Description().GetFieldByRelation(
		fieldDescription.RelationName,
		c.Name().Value(),
		objFieldDescription.Name,
		&otherSchema,
	)
	if otherObjFieldDescription.Kind != client.FieldKind_FOREIGN_OBJECT {
		// If the other field is not an object field then this is not a one to one relation and we can continue
		return nil
	}

	filter := fmt.Sprintf(
		`{_and: [{%s: {_ne: "%s"}}, {%s: {_eq: "%s"}}]}`,
		request.DocIDFieldName,
		docID,
		fieldDescription.Name,
		value,
	)
	selectionPlan, err := c.makeSelectionPlan(ctx, txn, filter)
	if err != nil {
		return err
	}

	err = selectionPlan.Init()
	if err != nil {
		closeErr := selectionPlan.Close()
		if closeErr != nil {
			return errors.Wrap(err.Error(), closeErr)
		}
		return err
	}

	if err = selectionPlan.Start(); err != nil {
		closeErr := selectionPlan.Close()
		if closeErr != nil {
			return errors.Wrap(err.Error(), closeErr)
		}
		return err
	}

	alreadyLinked, err := selectionPlan.Next()
	if err != nil {
		closeErr := selectionPlan.Close()
		if closeErr != nil {
			return errors.Wrap(err.Error(), closeErr)
		}
		return err
	}

	if alreadyLinked {
		existingDocument := selectionPlan.Value()
		err := selectionPlan.Close()
		if err != nil {
			return err
		}
		return NewErrOneOneAlreadyLinked(docID, existingDocument.GetID(), objFieldDescription.RelationName)
	}

	err = selectionPlan.Close()
	if err != nil {
		return err
	}

	return nil
}

// Delete will attempt to delete a document by docID and return true if a deletion is successful,
// otherwise will return false, along with an error, if it cannot.
// If the document doesn't exist, then it will return false, and a ErrDocumentNotFound error.
// This operation will all state relating to the given DocID. This includes data, block, and head storage.
func (c *collection) Delete(ctx context.Context, docID client.DocID) (bool, error) {
	txn, err := c.getTxn(ctx, false)
	if err != nil {
		return false, err
	}
	defer c.discardImplicitTxn(ctx, txn)

	primaryKey := c.getPrimaryKeyFromDocID(docID)
	exists, isDeleted, err := c.exists(ctx, txn, primaryKey)
	if err != nil {
		return false, err
	}
	if !exists || isDeleted {
		return false, client.ErrDocumentNotFound
	}
	if isDeleted {
		return false, NewErrDocumentDeleted(primaryKey.DocID)
	}

	err = c.applyDelete(ctx, txn, primaryKey)
	if err != nil {
		return false, err
	}
	return true, c.commitImplicitTxn(ctx, txn)
}

// Exists checks if a given document exists with supplied DocID.
func (c *collection) Exists(ctx context.Context, docID client.DocID) (bool, error) {
	txn, err := c.getTxn(ctx, false)
	if err != nil {
		return false, err
	}
	defer c.discardImplicitTxn(ctx, txn)

	primaryKey := c.getPrimaryKeyFromDocID(docID)
	exists, isDeleted, err := c.exists(ctx, txn, primaryKey)
	if err != nil && !errors.Is(err, ds.ErrNotFound) {
		return false, err
	}
	return exists && !isDeleted, c.commitImplicitTxn(ctx, txn)
}

// check if a document exists with the given primary key
func (c *collection) exists(
	ctx context.Context,
	txn datastore.Txn,
	primaryKey core.PrimaryDataStoreKey,
) (exists bool, isDeleted bool, err error) {
	val, err := txn.Datastore().Get(ctx, primaryKey.ToDS())
	if err != nil && errors.Is(err, ds.ErrNotFound) {
		return false, false, nil
	} else if err != nil {
		return false, false, err
	}
	if bytes.Equal(val, []byte{base.DeletedObjectMarker}) {
		return true, true, nil
	}

	return true, false, nil
}

func (c *collection) saveCompositeToMerkleCRDT(
	ctx context.Context,
	txn datastore.Txn,
	dsKey core.DataStoreKey,
	links []core.DAGLink,
	status client.DocumentStatus,
) (ipld.Node, uint64, error) {
	dsKey = dsKey.WithFieldId(core.COMPOSITE_NAMESPACE)
	merkleCRDT := merklecrdt.NewMerkleCompositeDAG(
		txn,
		core.NewCollectionSchemaVersionKey(c.Schema().VersionID, c.ID()),
		dsKey,
		"",
	)

	if status.IsDeleted() {
		return merkleCRDT.Delete(ctx, links)
	}

	return merkleCRDT.Save(ctx, links)
}

// getTxn gets or creates a new transaction from the underlying db.
// If the collection already has a txn, return the existing one.
// Otherwise, create a new implicit transaction.
func (c *collection) getTxn(ctx context.Context, readonly bool) (datastore.Txn, error) {
	if c.txn.HasValue() {
		return c.txn.Value(), nil
	}
	return c.db.NewTxn(ctx, readonly)
}

// discardImplicitTxn is a proxy function used by the collection to execute the Discard()
// transaction function only if its an implicit transaction.
//
// Implicit transactions are transactions that are created *during* an operation execution as a side effect.
//
// Explicit transactions are provided to the collection object via the "WithTxn(...)" function.
func (c *collection) discardImplicitTxn(ctx context.Context, txn datastore.Txn) {
	if !c.txn.HasValue() {
		txn.Discard(ctx)
	}
}

func (c *collection) commitImplicitTxn(ctx context.Context, txn datastore.Txn) error {
	if !c.txn.HasValue() {
		return txn.Commit(ctx)
	}
	return nil
}

func (c *collection) getPrimaryKeyFromDocID(docID client.DocID) core.PrimaryDataStoreKey {
	return core.PrimaryDataStoreKey{
		CollectionRootID: c.Description().RootID,
		DocID:            docID.String(),
	}
}

func (c *collection) getDataStoreKeyFromDocID(docID client.DocID) core.DataStoreKey {
	return core.DataStoreKey{
		CollectionRootID: c.Description().RootID,
		DocID:            docID.String(),
		InstanceType:     core.ValueKey,
	}
}

func (c *collection) tryGetFieldKey(primaryKey core.PrimaryDataStoreKey, fieldName string) (core.DataStoreKey, bool) {
	fieldId, hasField := c.tryGetSchemaFieldID(fieldName)
	if !hasField {
		return core.DataStoreKey{}, false
	}

	return core.DataStoreKey{
		CollectionRootID: c.Description().RootID,
		DocID:            primaryKey.DocID,
		FieldId:          strconv.FormatUint(uint64(fieldId), 10),
	}, true
}

// tryGetSchemaFieldID returns the FieldID of the given fieldName.
// Will return false if the field is not found.
func (c *collection) tryGetSchemaFieldID(fieldName string) (uint32, bool) {
	for _, field := range c.Schema().Fields {
		if field.Name == fieldName {
			if field.IsObject() || field.IsObjectArray() {
				// We do not wish to match navigational properties, only
				// fields directly on the collection.
				return uint32(0), false
			}
			return uint32(field.ID), true
		}
	}

	return uint32(0), false
}
